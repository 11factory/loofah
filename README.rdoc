= Loofah

* http://loofah.rubyforge.org
* http://rubyforge.org/projects/loofah
* http://github.com/flavorjones/loofah

== Description

Loofah can help you sanitize, scrub, fix-up and generally transform HTML.

It's built on top of Nokogiri and libxml2, so it's fast and has a nice
API.

Loofah's built-in sanitizers use HTML5lib's whitelist, so Loofah most
likely won't make your codes less secure. (These statements have not
been evaluated by Netexperts.)

== Features

* Easily write custom scrubbers leveraging the sweetness of Nokogiri and HTML5lib's whitelists.
* Common sanitizing tasks are built-in:
  * _Strip_ unsafe tags, leaving behind only the inner text.
  * _Prune_ unsafe tags and their subtrees, removing all traces that they ever existed.
  * _Escape_ unsafe tags and their subtrees, leaving behind lots of <tt>&lt;</tt> and <tt>&gt;</tt> entities.
  * _Whitewash_ the markup, removing all attributes and namespaced nodes.
* Common scrubbing tasks are built-in:
  * Add the _nofollow_ attribute to all hyperlinks.
* Format HTML as plain text.
* Replace Rails's +strip_tags+ and +sanitize+ helper methods.
* Two ActiveRecord extensions:
  * Loofah::XssFoliate, an XssTerminate[http://github.com/look/xss_terminate/tree/master] drop-in replacement, is an *opt-out* sanitizer. By default all models and attributes are sanitized.
  * Loofah::ActiveRecordExtension is an *opt-in* sanitizer. You must explicitly declare attributes to be sanitized.

== Compare and Contrast

Loofah is the only Ruby XSS/sanitization library that guarantees
well-formed and valid markup.

Also, it's pretty fast. Here is a benchmark comparing Loofah to other
commonly-used libraries (ActionView, Sanitize and HTML5lib):

* http://gist.github.com/170193

Lastly, Loofah is extensible. It's super-easy to write your own custom
scrubbers for whatever DOM manipulation you need.

== The Basics

Loofah is an HTML scrubber and sanitizer wrapped around
Nokogiri[http://nokogiri.org], an excellent HTML/XML parser. If you
don't know how Nokogiri[http://nokogiri.org] works, you might want to
pause for a moment and go check it out. I'll wait.

=== Loofah::HTML::Document

A Loofah::HTML::Document is a subclass of Nokogiri::HTML::Document, so
a parsed document gives you all the markup fixer-uppery and API
goodness of Nokogiri.

The class methods Loofah.document and Loofah.fragment will parse an
HTML document and an HTML fragment, respectively.

  Loofah.document(unsafe_html).is_a?(Nokogiri::HTML::Document)         # => true
  Loofah.fragment(unsafe_html).is_a?(Nokogiri::HTML::DocumentFragment) # => true

Loofah injects a +scrub!+ method, which takes either a symbol (for
built-in scrubbers) or a Loofah::Scrubber object (for custom
scrubbers), and modifies the document in-place.

Loofah overrides +to_s+ to return HTML:

  unsafe_html = "ohai! <div>div is safe</div> <script>but script is not</script>"

  doc = Loofah.fragment(unsafe_html).scrub!(:strip)
  doc.to_s    # => "ohai! <div>div is safe</div> "

and +text+ to return plain text:

  doc.text    # => "ohai! div is safe "

==== Tangent: Fragments vs Documents

Generally speaking, unless you expect to have a DOCTYPE,
\&lt;html\&gt; and \&lt;body\&gt; tags in your HTML, you don't have a
*document*, you have a *fragment*.

For parsing fragments, you should use Loofah.fragment. Nokogiri won't
wrap the result in +html+ and +body+ tags, and will ignore +head+
elements.

Full HTML documents should be parsed with Loofah.document, which will
add the DOCTYPE declaration, and properly handle +head+ and +body+
elements.

=== Loofah::Scrubber

A Scrubber wraps up a block (or method) that is run on an HTML node (element):

  # change all <span> tags to <div> tags
  span2div = Loofah::Scrubber.new do |node|
    node.name = "div" if node.name == "span"
  end

This can then be run on a document:

  Loofah.fragment("<span>foo</span><p>bar</p>").scrub!(span2div).to_s
  # => "<div>foo</div><p>bar</p>"

Scrubbers can be run on a document in either a top-down traversal (the
default) or bottom-up. Top-down scrubbers can optionally return
Scrubber::STOP to terminate the traversal of a subtree. Read below and
in the Loofah::Scrubber class for more detailed usage.

=== Built-In Scrubbers

Loofah comes with a set of sanitizing scrubbers that use HTML5lib's
whitelist algorithm:

  doc.scrub!(:strip)       # replaces unknown/unsafe tags with their inner text
  doc.scrub!(:prune)       #  removes unknown/unsafe tags and their children
  doc.scrub!(:escape)      #  escapes unknown/unsafe tags, like this: &lt;script&gt;
  doc.scrub!(:whitewash)   #  removes unknown/unsafe/namespaced tags and their children,
                           #          and strips all node attributes

Loofah also comes with some common transformation tasks: 

  doc.scrub!(:nofollow)    #     adds rel="nofollow" attribute to links

See Loofah::Scrubbers for more details and example usage.

=== Chaining Scrubbers

You can chain scrubbers:

  Loofah.fragment("<span>hello</span> <script>alert('OHAI')</script>") \
        .scrub!(:prune) \
        .scrub!(span2div).to_s
  # => "<div>hello</div> "

=== Shorthand

The class methods Loofah.scrub_fragment and Loofah.scrub_document are
shorthand.

  Loofah.scrub_fragment(unsafe_html, :prune)
  Loofah.scrub_document(unsafe_html, :prune)

are the same thing as (and arguably semantically clearer than):

  Loofah.fragment(unsafe_html).scrub!(:prune)
  Loofah.document(unsafe_html).scrub!(:prune)

=== ActiveRecord Extension \#1: Opt-In

See Loofah::ActiveRecordExtension for full documentation. The methods
mixed into ActiveRecord are:

* Loofah::ActiveRecordExtension.html_document
* Loofah::ActiveRecordExtension.html_fragment

which are used to declare how specific string and text attributes
should be scrubbed at +before_validation+.

  # app/model/post.rb
  class Post < ActiveRecord::Base
    html_fragment :body, :scrub => :prune  # scrubs 'body' at before_validation
  end

=== ActiveRecord Extension \#2: Opt-Out

See Loofah::XssFoliate::ClassMethods for more documentation. The methods mixed into ActiveRecord are:

* Loofah::XssFoliate::ClassMethods.xss_foliate
* Loofah::XssFoliate::ClassMethods.xss_foliated?

which are used to declare how specific string and text attributes
should be scrubbed at +before_validation+.

Attributes are stripped by default, unless another scrubber is
specified or the attribute is present in an +:except+ clause.

== Requirements

* Nokogiri >= 1.3.3
* Ruby 1.8.6, 1.8.7 or 1.9
* Rails 2.3, 2.2, 2.1, 2.0 or 1.2 (if you're using the ActiveRecord extensions)

== Installation

Unsurprisingly:

* gem install loofah

== Support

The bug tracker is available here:

* http://github.com/flavorjones/loofah/issues

For now, we're piggybacking on the Nokogiri mailing list:

* http://groups.google.com/group/nokogiri-talk

And the IRC channel is #nokogiri on freenode.

== Related Links

* Nokogiri: http://nokogiri.org
* libxml2: http://xmlsoft.org
* html5lib: http://code.google.com/p/html5lib
* XssTerminate: http://github.com/look/xss_terminate/tree/master

== Authors

* {Mike Dalessio}[mailto:mike.dalessio@gmail.com] (@flavorjones)
* {Bryan Helmkamp}[mailto:bryan@brynary.com]

Featuring code contributed by:

* Aaron Patterson
* John Barnette
* Josh Owens
* Paul Dix
* Josh Nichols
* Luke Melia

And a big shout-out to Corey Innis for the name, and feedback on the API.

== Historical Note

This library was formerly known as Dryopteris, which was a very bad
name that nobody could spell properly.

== License

The MIT License

Copyright (c) 2009 Mike Dalessio, Bryan Helmkamp

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
